use sakila;

-- List the number of films per category.

SELECT *
FROM film_category;

SELECT category_id, count(film_id) as CantidadPelis
FROM film_category
group by category_id;

-- Retrieve the store ID, city, and country for each store.
SELECT *
from store;

SELECT a.store_id, c.city, d.country FROM store AS a
JOIN address AS b
ON a.address_id = b.address_id
JOIN city AS c
ON b.city_id = c.city_id
JOIN country as d
on c.country_id = d.country_id;


-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) from payment as p
JOIN staff as stf
ON p.staff_id = stf.staff_id
JOIN store as s
ON stf.store_id = s.store_id
GROUP BY s.store_id;



-- Determine the average running time of films for each category.
SELECT cat.category_id, AVG(f.length) as averageLen from film_category as cat
JOIN film as f
ON f.film_id = cat.film_id
group by cat.category_id;


-- Identify the film categories with the longest average running time.

SELECT cat.category_id, AVG(f.length) as averageLen from film_category as cat
JOIN film as f
ON f.film_id = cat.film_id
group by cat.category_id
order by averageLen DESC;

-- Display the top 10 most frequently rented movies in descending order.
SELECT inv.film_id, COUNT(r.rental_id) as qtty from inventory as inv
JOIN rental as r
ON r.inventory_id = inv.inventory_id
group by inv.film_id
order by qtty DESC
LIMIT 10;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.film_id, IF( (SELECT DISTINCT title) = 'ACADEMY DINOSAUR', 'Can be rented', 'Can not be rented') as 'Can be rented?' from inventory as inv
JOIN film as f
ON f.film_id = inv.film_id
WHERE inv.store_id = 1 AND title = 'ACADEMY DINOSAUR';

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."

SELECT COUNT(*) 
AS films_available 
FROM inventory;

SELECT COUNT(*)
FROM rental
WHERE return_date IS NULL;

SELECT DISTINCT inv.film_id, IFNULL(return_date, 'NOT available') FROM rental as r
JOIN inventory as inv
ON r.inventory_id = inv.inventory_id
where return_date IS NULL
UNION
SELECT DISTINCT inv.film_id, 'Available' FROM rental as r
JOIN inventory as inv
ON r.inventory_id = inv.inventory_id
where return_date IS NOT NULL
ORDER BY film_id;

SELECT DISTINCT(f.TITLE), 
CASE WHEN i.inventory_id IS NOT NULL AND r.return_date IS NULL
    THEN 'NOT AVAILABLE'
    WHEN i.inventory_id IS NULL 
    THEN 'NOT AVAILABLE BY INVENTORY'
    ELSE 'AVAILABLE'
END AS STATUS
FROM FILM f
LEFT JOIN INVENTORY i
ON f.film_id=i.film_id
LEFT JOIN RENTAL r
ON i.inventory_id= r.inventory_id;